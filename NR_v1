clc; clearvars;

% Initialization(will be updated)
x1 = 1;             %initial guess
x2 = 1;             %initial guess
x3 = 1;             %initial guess

cc = 1e-4;          % Convergence criterion
h = 1e-8;           % Step size for numerical differentiation
k = 1;              % Iteration counter
max_iter = 1000;    % Maximum iterations

% Target values
targetValue1 = 2;      
targetValue2 = 4;
targetValue3 = 5;

% Define Special Function (System of Equations)
function [f1, f2, f3] = mySpecialFunction(x1, x2, x3)
    f1 = 2*x1 + 4*x2 + sin(x3);               % Equation 1
    f2 = x2^2 + 3*x2 - 5 + cos(x2);           % Equation 2
    f3 = 4*x3 + 6;                            % Equation 3
end

% Newton-Raphson Loop
while k <= max_iter
    % Evaluate function at current guess
    [f1, f2, f3] = mySpecialFunction(x1, x2, x3);

    % Compute residuals
    r1 = f1 - targetValue1;
    r2 = f2 - targetValue2;
    r3 = f3 - targetValue3;

    % Check convergence
    if abs(r1) < cc && abs(r2) < cc && abs(r3) < cc
        break
    end

    % Assign each function to the matrix
    [f1h, ~, ~] = mySpecialFunction(x1 + h, x2, x3);
    [~, f2h, ~] = mySpecialFunction(x1, x2 + h, x3);
    [~, ~, f3h] = mySpecialFunction(x1, x2, x3 + h);
    [f1h12, ~, ~] = mySpecialFunction(x1, x2 + h, x3);
    [f1h13, ~, ~] = mySpecialFunction(x1, x2, x3 + h);
    [~, f2h21, ~] = mySpecialFunction(x1 + h, x2, x3);
    [~, f2h23, ~] = mySpecialFunction(x1, x2, x3 + h);
    [~, ~, f3h31] = mySpecialFunction(x1 + h, x2, x3);
    [~, ~, f3h32] = mySpecialFunction(x1, x2 + h, x3);

    % Partial derivatives
    J11 = (f1h - f1) / h;
    J12 = (f1h12 - f1) / h;
    J13 = (f1h13 - f1) / h;
    J21 = (f2h21 - f2) / h;
    J22 = (f2h - f2) / h;
    J23 = (f2h23 - f2) / h;
    J31 = (f3h31 - f3) / h;
    J32 = (f3h32 - f3) / h;
    J33 = (f3h - f3) / h;

    % Construct full Jacobian matrix
    J = [J11, J12, J13; 
         J21, J22, J23; 
         J31, J32, J33];

    % Solve for updates using matrix division
    dx = -J \ [r1; r2; r3];

    % Update variables
    x1 = x1 + dx(1);
    x2 = x2 + dx(2);
    x3 = x3 + dx(3);

    k = k + 1;
end

% Display solution
fprintf('x1 = %.5f, x2 = %.5f, x3 = %.5f\n', x1, x2, x3);

% Plots %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

x_vals = linspace(-2, 2, 100);
y1_vals = arrayfun(@(x) mySpecialFunction(x, x2, x3), x_vals);
y2_vals = arrayfun(@(x) mySpecialFunction(x1, x, x3), x_vals);
y3_vals = arrayfun(@(x) mySpecialFunction(x1, x2, x), x_vals);

figure;
subplot(3,1,1);
plot(x_vals, y1_vals, 'b'); hold on; grid on;
plot(x1, mySpecialFunction(x1, x2, x3), '*k');
title('Equation 1: y1');

subplot(3,1,2);
plot(x_vals, y2_vals, 'r'); hold on; grid on;
plot(x2, mySpecialFunction(x1, x2, x3), '*k');
title('Equation 2: y2');

subplot(3,1,3);
plot(x_vals, y3_vals, 'g'); hold on; grid on;
plot(x3, mySpecialFunction(x1, x2, x3), '*k');
title('Equation 3: y3');
